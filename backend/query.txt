
GET /content/search?title=naruto
GET /content/search?id=5


func SearchContentHandler(db *sql.DB) fiber.Handler {
	return func(c *fiber.Ctx) error {
		titleParam := c.Query("title")
		idParam := c.Query("id")

		var (
			rows *sql.Rows
			err  error
		)

		queryBase := `
		SELECT 
			ct.content_id,
			ct.content_title,
			CASE ct.content_type WHEN 1 THEN 'Serie' WHEN 2 THEN 'Anime' END as content_type,
			ct.content_cover,
			ct.content_year,
			g.gender_name,
			s.season_id,
			s.season_name,
			e.episode_id,
			e.episode_number,
			e.episode_name,
			e.episode_url
		FROM content_types ct
		JOIN genders g ON g.gender_id = ct.gender_id
		JOIN seasons s ON s.content_id = ct.content_id
		JOIN episodes e ON e.season_id = s.season_id
		WHERE %s
		ORDER BY s.season_id, e.episode_number;
		`

		if idParam != "" {
			query := fmt.Sprintf(queryBase, "ct.content_id = ?")
			rows, err = db.Query(query, idParam)
		} else if titleParam != "" {
			search := "%" + strings.ToUpper(titleParam) + "%"
			query := fmt.Sprintf(queryBase, "UPPER(ct.content_title) LIKE ?")
			rows, err = db.Query(query, search)
		} else {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "Se requiere par√°metro 'title' o 'id'",
			})
		}

		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error": err.Error(),
			})
		}
		defer rows.Close()

		contentMap := make(map[uint]*models.ExampleData)
		for rows.Next() {
			var (
				contentId     uint
				contentTitle  string
				contentType   string
				contentCover  string
				contentYear   int
				gender        string
				seasonId      uint
				seasonName    string
				episodeId     uint
				episodeNumber int
				episodeName   string
				episodeUrl    string
			)

			err := rows.Scan(
				&contentId,
				&contentTitle,
				&contentType,
				&contentCover,
				&contentYear,
				&gender,
				&seasonId,
				&seasonName,
				&episodeId,
				&episodeNumber,
				&episodeName,
				&episodeUrl,
			)
			if err != nil {
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
					"error": err.Error(),
				})
			}

			// Mismo agrupamiento que antes
			if _, ok := contentMap[contentId]; !ok {
				contentMap[contentId] = &models.ExampleData{
					Content: models.ExampleContent{
						Content_Id:    contentId,
						Content_Title: contentTitle,
						Content_Type:  contentType,
						Content_Cover: contentCover,
						Content_Year:  contentYear,
						Gender:        gender,
					},
					Seasons: []models.ExampleSeason{},
				}
			}

			// Buscar o crear temporada
			var season *models.ExampleSeason
			for i := range contentMap[contentId].Seasons {
				if contentMap[contentId].Seasons[i].Season_Id == seasonId {
					season = &contentMap[contentId].Seasons[i]
					break
				}
			}
			if season == nil {
				newSeason := models.ExampleSeason{
					Season_Id:   seasonId,
					Season_Name: seasonName,
					Episodes:    []models.ExampleEpisodie{},
				}
				contentMap[contentId].Seasons = append(contentMap[contentId].Seasons, newSeason)
				season = &contentMap[contentId].Seasons[len(contentMap[contentId].Seasons)-1]
			}

			season.Episodes = append(season.Episodes, models.ExampleEpisodie{
				Episode_Id:     episodeId,
				Episode_Number: episodeNumber,
				Episode_Name:   episodeName,
				Episode_Url:    episodeUrl,
			})
		}

		var results []models.ExampleData
		for _, v := range contentMap {
			results = append(results, *v)
		}

		if len(results) == 0 {
			return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
				"message": "No se encontraron resultados",
			})
		}

		return c.JSON(results)
	}
}
